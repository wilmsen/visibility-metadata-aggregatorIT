/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opentext.bn.converters.avro.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EnvelopeEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6468217464422801426L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnvelopeEvent\",\"namespace\":\"com.opentext.bn.converters.avro.entity\",\"fields\":[{\"name\":\"containingParentId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"containingParentLevel\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"containingParentType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"contentKeys\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ContentKey\",\"fields\":[{\"name\":\"keyName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"keyValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"keyType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}],\"default\":null},{\"name\":\"controlNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"directDocumentCount\",\"type\":\"int\"},{\"name\":\"directEnvelopeCount\",\"type\":\"int\"},{\"name\":\"documentType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"documentFunctionalClassification\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"envelopeId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"envelopeLevel\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"envelopeType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"envelopeVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"eventTimestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"fileInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PayloadRef\",\"fields\":[{\"name\":\"payloadId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"payloadType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"default\":null},{\"name\":\"introspectionSource\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"introspectionType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"IntrospectionType\",\"symbols\":[\"INTROSPECTED\",\"GENERATED\"]}],\"default\":null},{\"name\":\"processId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"productionTestFlag\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"receiverAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"segmentTerminator\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"senderAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sentDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sentTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"taskId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EnvelopeEvent> ENCODER =
      new BinaryMessageEncoder<EnvelopeEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EnvelopeEvent> DECODER =
      new BinaryMessageDecoder<EnvelopeEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EnvelopeEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EnvelopeEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EnvelopeEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EnvelopeEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EnvelopeEvent from a ByteBuffer. */
  public static EnvelopeEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String containingParentId;
   private java.lang.String containingParentLevel;
   private java.lang.String containingParentType;
   private java.util.List<com.opentext.bn.converters.avro.entity.ContentKey> contentKeys;
   private java.lang.String controlNumber;
   private int directDocumentCount;
   private int directEnvelopeCount;
   private java.lang.String documentType;
   private java.lang.String documentFunctionalClassification;
   private java.lang.String envelopeId;
   private java.lang.String envelopeLevel;
   private java.lang.String envelopeType;
   private java.lang.String envelopeVersion;
   private java.lang.String eventId;
   private java.lang.Long eventTimestamp;
   private com.opentext.bn.converters.avro.entity.PayloadRef fileInfo;
   private java.lang.String introspectionSource;
   private com.opentext.bn.converters.avro.entity.IntrospectionType introspectionType;
   private java.lang.String processId;
   private java.lang.String productionTestFlag;
   private java.lang.String receiverAddress;
   private java.lang.String segmentTerminator;
   private java.lang.String senderAddress;
   private java.lang.String sentDate;
   private java.lang.String sentTime;
   private java.lang.String taskId;
   private java.lang.String transactionId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnvelopeEvent() {}

  /**
   * All-args constructor.
   * @param containingParentId The new value for containingParentId
   * @param containingParentLevel The new value for containingParentLevel
   * @param containingParentType The new value for containingParentType
   * @param contentKeys The new value for contentKeys
   * @param controlNumber The new value for controlNumber
   * @param directDocumentCount The new value for directDocumentCount
   * @param directEnvelopeCount The new value for directEnvelopeCount
   * @param documentType The new value for documentType
   * @param documentFunctionalClassification The new value for documentFunctionalClassification
   * @param envelopeId The new value for envelopeId
   * @param envelopeLevel The new value for envelopeLevel
   * @param envelopeType The new value for envelopeType
   * @param envelopeVersion The new value for envelopeVersion
   * @param eventId The new value for eventId
   * @param eventTimestamp The new value for eventTimestamp
   * @param fileInfo The new value for fileInfo
   * @param introspectionSource The new value for introspectionSource
   * @param introspectionType The new value for introspectionType
   * @param processId The new value for processId
   * @param productionTestFlag The new value for productionTestFlag
   * @param receiverAddress The new value for receiverAddress
   * @param segmentTerminator The new value for segmentTerminator
   * @param senderAddress The new value for senderAddress
   * @param sentDate The new value for sentDate
   * @param sentTime The new value for sentTime
   * @param taskId The new value for taskId
   * @param transactionId The new value for transactionId
   */
  public EnvelopeEvent(java.lang.String containingParentId, java.lang.String containingParentLevel, java.lang.String containingParentType, java.util.List<com.opentext.bn.converters.avro.entity.ContentKey> contentKeys, java.lang.String controlNumber, java.lang.Integer directDocumentCount, java.lang.Integer directEnvelopeCount, java.lang.String documentType, java.lang.String documentFunctionalClassification, java.lang.String envelopeId, java.lang.String envelopeLevel, java.lang.String envelopeType, java.lang.String envelopeVersion, java.lang.String eventId, java.lang.Long eventTimestamp, com.opentext.bn.converters.avro.entity.PayloadRef fileInfo, java.lang.String introspectionSource, com.opentext.bn.converters.avro.entity.IntrospectionType introspectionType, java.lang.String processId, java.lang.String productionTestFlag, java.lang.String receiverAddress, java.lang.String segmentTerminator, java.lang.String senderAddress, java.lang.String sentDate, java.lang.String sentTime, java.lang.String taskId, java.lang.String transactionId) {
    this.containingParentId = containingParentId;
    this.containingParentLevel = containingParentLevel;
    this.containingParentType = containingParentType;
    this.contentKeys = contentKeys;
    this.controlNumber = controlNumber;
    this.directDocumentCount = directDocumentCount;
    this.directEnvelopeCount = directEnvelopeCount;
    this.documentType = documentType;
    this.documentFunctionalClassification = documentFunctionalClassification;
    this.envelopeId = envelopeId;
    this.envelopeLevel = envelopeLevel;
    this.envelopeType = envelopeType;
    this.envelopeVersion = envelopeVersion;
    this.eventId = eventId;
    this.eventTimestamp = eventTimestamp;
    this.fileInfo = fileInfo;
    this.introspectionSource = introspectionSource;
    this.introspectionType = introspectionType;
    this.processId = processId;
    this.productionTestFlag = productionTestFlag;
    this.receiverAddress = receiverAddress;
    this.segmentTerminator = segmentTerminator;
    this.senderAddress = senderAddress;
    this.sentDate = sentDate;
    this.sentTime = sentTime;
    this.taskId = taskId;
    this.transactionId = transactionId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return containingParentId;
    case 1: return containingParentLevel;
    case 2: return containingParentType;
    case 3: return contentKeys;
    case 4: return controlNumber;
    case 5: return directDocumentCount;
    case 6: return directEnvelopeCount;
    case 7: return documentType;
    case 8: return documentFunctionalClassification;
    case 9: return envelopeId;
    case 10: return envelopeLevel;
    case 11: return envelopeType;
    case 12: return envelopeVersion;
    case 13: return eventId;
    case 14: return eventTimestamp;
    case 15: return fileInfo;
    case 16: return introspectionSource;
    case 17: return introspectionType;
    case 18: return processId;
    case 19: return productionTestFlag;
    case 20: return receiverAddress;
    case 21: return segmentTerminator;
    case 22: return senderAddress;
    case 23: return sentDate;
    case 24: return sentTime;
    case 25: return taskId;
    case 26: return transactionId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: containingParentId = (java.lang.String)value$; break;
    case 1: containingParentLevel = (java.lang.String)value$; break;
    case 2: containingParentType = (java.lang.String)value$; break;
    case 3: contentKeys = (java.util.List<com.opentext.bn.converters.avro.entity.ContentKey>)value$; break;
    case 4: controlNumber = (java.lang.String)value$; break;
    case 5: directDocumentCount = (java.lang.Integer)value$; break;
    case 6: directEnvelopeCount = (java.lang.Integer)value$; break;
    case 7: documentType = (java.lang.String)value$; break;
    case 8: documentFunctionalClassification = (java.lang.String)value$; break;
    case 9: envelopeId = (java.lang.String)value$; break;
    case 10: envelopeLevel = (java.lang.String)value$; break;
    case 11: envelopeType = (java.lang.String)value$; break;
    case 12: envelopeVersion = (java.lang.String)value$; break;
    case 13: eventId = (java.lang.String)value$; break;
    case 14: eventTimestamp = (java.lang.Long)value$; break;
    case 15: fileInfo = (com.opentext.bn.converters.avro.entity.PayloadRef)value$; break;
    case 16: introspectionSource = (java.lang.String)value$; break;
    case 17: introspectionType = (com.opentext.bn.converters.avro.entity.IntrospectionType)value$; break;
    case 18: processId = (java.lang.String)value$; break;
    case 19: productionTestFlag = (java.lang.String)value$; break;
    case 20: receiverAddress = (java.lang.String)value$; break;
    case 21: segmentTerminator = (java.lang.String)value$; break;
    case 22: senderAddress = (java.lang.String)value$; break;
    case 23: sentDate = (java.lang.String)value$; break;
    case 24: sentTime = (java.lang.String)value$; break;
    case 25: taskId = (java.lang.String)value$; break;
    case 26: transactionId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'containingParentId' field.
   * @return The value of the 'containingParentId' field.
   */
  public java.lang.String getContainingParentId() {
    return containingParentId;
  }


  /**
   * Gets the value of the 'containingParentLevel' field.
   * @return The value of the 'containingParentLevel' field.
   */
  public java.lang.String getContainingParentLevel() {
    return containingParentLevel;
  }


  /**
   * Gets the value of the 'containingParentType' field.
   * @return The value of the 'containingParentType' field.
   */
  public java.lang.String getContainingParentType() {
    return containingParentType;
  }


  /**
   * Gets the value of the 'contentKeys' field.
   * @return The value of the 'contentKeys' field.
   */
  public java.util.List<com.opentext.bn.converters.avro.entity.ContentKey> getContentKeys() {
    return contentKeys;
  }


  /**
   * Gets the value of the 'controlNumber' field.
   * @return The value of the 'controlNumber' field.
   */
  public java.lang.String getControlNumber() {
    return controlNumber;
  }


  /**
   * Gets the value of the 'directDocumentCount' field.
   * @return The value of the 'directDocumentCount' field.
   */
  public java.lang.Integer getDirectDocumentCount() {
    return directDocumentCount;
  }


  /**
   * Gets the value of the 'directEnvelopeCount' field.
   * @return The value of the 'directEnvelopeCount' field.
   */
  public java.lang.Integer getDirectEnvelopeCount() {
    return directEnvelopeCount;
  }


  /**
   * Gets the value of the 'documentType' field.
   * @return The value of the 'documentType' field.
   */
  public java.lang.String getDocumentType() {
    return documentType;
  }


  /**
   * Gets the value of the 'documentFunctionalClassification' field.
   * @return The value of the 'documentFunctionalClassification' field.
   */
  public java.lang.String getDocumentFunctionalClassification() {
    return documentFunctionalClassification;
  }


  /**
   * Gets the value of the 'envelopeId' field.
   * @return The value of the 'envelopeId' field.
   */
  public java.lang.String getEnvelopeId() {
    return envelopeId;
  }


  /**
   * Gets the value of the 'envelopeLevel' field.
   * @return The value of the 'envelopeLevel' field.
   */
  public java.lang.String getEnvelopeLevel() {
    return envelopeLevel;
  }


  /**
   * Gets the value of the 'envelopeType' field.
   * @return The value of the 'envelopeType' field.
   */
  public java.lang.String getEnvelopeType() {
    return envelopeType;
  }


  /**
   * Gets the value of the 'envelopeVersion' field.
   * @return The value of the 'envelopeVersion' field.
   */
  public java.lang.String getEnvelopeVersion() {
    return envelopeVersion;
  }


  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Gets the value of the 'eventTimestamp' field.
   * @return The value of the 'eventTimestamp' field.
   */
  public java.lang.Long getEventTimestamp() {
    return eventTimestamp;
  }


  /**
   * Gets the value of the 'fileInfo' field.
   * @return The value of the 'fileInfo' field.
   */
  public com.opentext.bn.converters.avro.entity.PayloadRef getFileInfo() {
    return fileInfo;
  }


  /**
   * Gets the value of the 'introspectionSource' field.
   * @return The value of the 'introspectionSource' field.
   */
  public java.lang.String getIntrospectionSource() {
    return introspectionSource;
  }


  /**
   * Gets the value of the 'introspectionType' field.
   * @return The value of the 'introspectionType' field.
   */
  public com.opentext.bn.converters.avro.entity.IntrospectionType getIntrospectionType() {
    return introspectionType;
  }


  /**
   * Gets the value of the 'processId' field.
   * @return The value of the 'processId' field.
   */
  public java.lang.String getProcessId() {
    return processId;
  }


  /**
   * Gets the value of the 'productionTestFlag' field.
   * @return The value of the 'productionTestFlag' field.
   */
  public java.lang.String getProductionTestFlag() {
    return productionTestFlag;
  }


  /**
   * Gets the value of the 'receiverAddress' field.
   * @return The value of the 'receiverAddress' field.
   */
  public java.lang.String getReceiverAddress() {
    return receiverAddress;
  }


  /**
   * Gets the value of the 'segmentTerminator' field.
   * @return The value of the 'segmentTerminator' field.
   */
  public java.lang.String getSegmentTerminator() {
    return segmentTerminator;
  }


  /**
   * Gets the value of the 'senderAddress' field.
   * @return The value of the 'senderAddress' field.
   */
  public java.lang.String getSenderAddress() {
    return senderAddress;
  }


  /**
   * Gets the value of the 'sentDate' field.
   * @return The value of the 'sentDate' field.
   */
  public java.lang.String getSentDate() {
    return sentDate;
  }


  /**
   * Gets the value of the 'sentTime' field.
   * @return The value of the 'sentTime' field.
   */
  public java.lang.String getSentTime() {
    return sentTime;
  }


  /**
   * Gets the value of the 'taskId' field.
   * @return The value of the 'taskId' field.
   */
  public java.lang.String getTaskId() {
    return taskId;
  }


  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }


  /**
   * Creates a new EnvelopeEvent RecordBuilder.
   * @return A new EnvelopeEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder newBuilder() {
    return new com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder();
  }

  /**
   * Creates a new EnvelopeEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnvelopeEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder newBuilder(com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder other) {
    return new com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder(other);
  }

  /**
   * Creates a new EnvelopeEvent RecordBuilder by copying an existing EnvelopeEvent instance.
   * @param other The existing instance to copy.
   * @return A new EnvelopeEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder newBuilder(com.opentext.bn.converters.avro.entity.EnvelopeEvent other) {
    return new com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder(other);
  }

  /**
   * RecordBuilder for EnvelopeEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnvelopeEvent>
    implements org.apache.avro.data.RecordBuilder<EnvelopeEvent> {

    private java.lang.String containingParentId;
    private java.lang.String containingParentLevel;
    private java.lang.String containingParentType;
    private java.util.List<com.opentext.bn.converters.avro.entity.ContentKey> contentKeys;
    private java.lang.String controlNumber;
    private int directDocumentCount;
    private int directEnvelopeCount;
    private java.lang.String documentType;
    private java.lang.String documentFunctionalClassification;
    private java.lang.String envelopeId;
    private java.lang.String envelopeLevel;
    private java.lang.String envelopeType;
    private java.lang.String envelopeVersion;
    private java.lang.String eventId;
    private java.lang.Long eventTimestamp;
    private com.opentext.bn.converters.avro.entity.PayloadRef fileInfo;
    private com.opentext.bn.converters.avro.entity.PayloadRef.Builder fileInfoBuilder;
    private java.lang.String introspectionSource;
    private com.opentext.bn.converters.avro.entity.IntrospectionType introspectionType;
    private java.lang.String processId;
    private java.lang.String productionTestFlag;
    private java.lang.String receiverAddress;
    private java.lang.String segmentTerminator;
    private java.lang.String senderAddress;
    private java.lang.String sentDate;
    private java.lang.String sentTime;
    private java.lang.String taskId;
    private java.lang.String transactionId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.containingParentId)) {
        this.containingParentId = data().deepCopy(fields()[0].schema(), other.containingParentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.containingParentLevel)) {
        this.containingParentLevel = data().deepCopy(fields()[1].schema(), other.containingParentLevel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.containingParentType)) {
        this.containingParentType = data().deepCopy(fields()[2].schema(), other.containingParentType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contentKeys)) {
        this.contentKeys = data().deepCopy(fields()[3].schema(), other.contentKeys);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.controlNumber)) {
        this.controlNumber = data().deepCopy(fields()[4].schema(), other.controlNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.directDocumentCount)) {
        this.directDocumentCount = data().deepCopy(fields()[5].schema(), other.directDocumentCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.directEnvelopeCount)) {
        this.directEnvelopeCount = data().deepCopy(fields()[6].schema(), other.directEnvelopeCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.documentType)) {
        this.documentType = data().deepCopy(fields()[7].schema(), other.documentType);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.documentFunctionalClassification)) {
        this.documentFunctionalClassification = data().deepCopy(fields()[8].schema(), other.documentFunctionalClassification);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.envelopeId)) {
        this.envelopeId = data().deepCopy(fields()[9].schema(), other.envelopeId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.envelopeLevel)) {
        this.envelopeLevel = data().deepCopy(fields()[10].schema(), other.envelopeLevel);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.envelopeType)) {
        this.envelopeType = data().deepCopy(fields()[11].schema(), other.envelopeType);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.envelopeVersion)) {
        this.envelopeVersion = data().deepCopy(fields()[12].schema(), other.envelopeVersion);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.eventId)) {
        this.eventId = data().deepCopy(fields()[13].schema(), other.eventId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[14].schema(), other.eventTimestamp);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.fileInfo)) {
        this.fileInfo = data().deepCopy(fields()[15].schema(), other.fileInfo);
        fieldSetFlags()[15] = true;
      }
      if (other.hasFileInfoBuilder()) {
        this.fileInfoBuilder = com.opentext.bn.converters.avro.entity.PayloadRef.newBuilder(other.getFileInfoBuilder());
      }
      if (isValidValue(fields()[16], other.introspectionSource)) {
        this.introspectionSource = data().deepCopy(fields()[16].schema(), other.introspectionSource);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.introspectionType)) {
        this.introspectionType = data().deepCopy(fields()[17].schema(), other.introspectionType);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.processId)) {
        this.processId = data().deepCopy(fields()[18].schema(), other.processId);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.productionTestFlag)) {
        this.productionTestFlag = data().deepCopy(fields()[19].schema(), other.productionTestFlag);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.receiverAddress)) {
        this.receiverAddress = data().deepCopy(fields()[20].schema(), other.receiverAddress);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.segmentTerminator)) {
        this.segmentTerminator = data().deepCopy(fields()[21].schema(), other.segmentTerminator);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.senderAddress)) {
        this.senderAddress = data().deepCopy(fields()[22].schema(), other.senderAddress);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.sentDate)) {
        this.sentDate = data().deepCopy(fields()[23].schema(), other.sentDate);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.sentTime)) {
        this.sentTime = data().deepCopy(fields()[24].schema(), other.sentTime);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.taskId)) {
        this.taskId = data().deepCopy(fields()[25].schema(), other.taskId);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[26].schema(), other.transactionId);
        fieldSetFlags()[26] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EnvelopeEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.EnvelopeEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.containingParentId)) {
        this.containingParentId = data().deepCopy(fields()[0].schema(), other.containingParentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.containingParentLevel)) {
        this.containingParentLevel = data().deepCopy(fields()[1].schema(), other.containingParentLevel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.containingParentType)) {
        this.containingParentType = data().deepCopy(fields()[2].schema(), other.containingParentType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contentKeys)) {
        this.contentKeys = data().deepCopy(fields()[3].schema(), other.contentKeys);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.controlNumber)) {
        this.controlNumber = data().deepCopy(fields()[4].schema(), other.controlNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.directDocumentCount)) {
        this.directDocumentCount = data().deepCopy(fields()[5].schema(), other.directDocumentCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.directEnvelopeCount)) {
        this.directEnvelopeCount = data().deepCopy(fields()[6].schema(), other.directEnvelopeCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.documentType)) {
        this.documentType = data().deepCopy(fields()[7].schema(), other.documentType);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.documentFunctionalClassification)) {
        this.documentFunctionalClassification = data().deepCopy(fields()[8].schema(), other.documentFunctionalClassification);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.envelopeId)) {
        this.envelopeId = data().deepCopy(fields()[9].schema(), other.envelopeId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.envelopeLevel)) {
        this.envelopeLevel = data().deepCopy(fields()[10].schema(), other.envelopeLevel);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.envelopeType)) {
        this.envelopeType = data().deepCopy(fields()[11].schema(), other.envelopeType);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.envelopeVersion)) {
        this.envelopeVersion = data().deepCopy(fields()[12].schema(), other.envelopeVersion);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.eventId)) {
        this.eventId = data().deepCopy(fields()[13].schema(), other.eventId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[14].schema(), other.eventTimestamp);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.fileInfo)) {
        this.fileInfo = data().deepCopy(fields()[15].schema(), other.fileInfo);
        fieldSetFlags()[15] = true;
      }
      this.fileInfoBuilder = null;
      if (isValidValue(fields()[16], other.introspectionSource)) {
        this.introspectionSource = data().deepCopy(fields()[16].schema(), other.introspectionSource);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.introspectionType)) {
        this.introspectionType = data().deepCopy(fields()[17].schema(), other.introspectionType);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.processId)) {
        this.processId = data().deepCopy(fields()[18].schema(), other.processId);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.productionTestFlag)) {
        this.productionTestFlag = data().deepCopy(fields()[19].schema(), other.productionTestFlag);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.receiverAddress)) {
        this.receiverAddress = data().deepCopy(fields()[20].schema(), other.receiverAddress);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.segmentTerminator)) {
        this.segmentTerminator = data().deepCopy(fields()[21].schema(), other.segmentTerminator);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.senderAddress)) {
        this.senderAddress = data().deepCopy(fields()[22].schema(), other.senderAddress);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.sentDate)) {
        this.sentDate = data().deepCopy(fields()[23].schema(), other.sentDate);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.sentTime)) {
        this.sentTime = data().deepCopy(fields()[24].schema(), other.sentTime);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.taskId)) {
        this.taskId = data().deepCopy(fields()[25].schema(), other.taskId);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[26].schema(), other.transactionId);
        fieldSetFlags()[26] = true;
      }
    }

    /**
      * Gets the value of the 'containingParentId' field.
      * @return The value.
      */
    public java.lang.String getContainingParentId() {
      return containingParentId;
    }

    /**
      * Sets the value of the 'containingParentId' field.
      * @param value The value of 'containingParentId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setContainingParentId(java.lang.String value) {
      validate(fields()[0], value);
      this.containingParentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'containingParentId' field has been set.
      * @return True if the 'containingParentId' field has been set, false otherwise.
      */
    public boolean hasContainingParentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'containingParentId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearContainingParentId() {
      containingParentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'containingParentLevel' field.
      * @return The value.
      */
    public java.lang.String getContainingParentLevel() {
      return containingParentLevel;
    }

    /**
      * Sets the value of the 'containingParentLevel' field.
      * @param value The value of 'containingParentLevel'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setContainingParentLevel(java.lang.String value) {
      validate(fields()[1], value);
      this.containingParentLevel = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'containingParentLevel' field has been set.
      * @return True if the 'containingParentLevel' field has been set, false otherwise.
      */
    public boolean hasContainingParentLevel() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'containingParentLevel' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearContainingParentLevel() {
      containingParentLevel = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'containingParentType' field.
      * @return The value.
      */
    public java.lang.String getContainingParentType() {
      return containingParentType;
    }

    /**
      * Sets the value of the 'containingParentType' field.
      * @param value The value of 'containingParentType'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setContainingParentType(java.lang.String value) {
      validate(fields()[2], value);
      this.containingParentType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'containingParentType' field has been set.
      * @return True if the 'containingParentType' field has been set, false otherwise.
      */
    public boolean hasContainingParentType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'containingParentType' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearContainingParentType() {
      containingParentType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'contentKeys' field.
      * @return The value.
      */
    public java.util.List<com.opentext.bn.converters.avro.entity.ContentKey> getContentKeys() {
      return contentKeys;
    }

    /**
      * Sets the value of the 'contentKeys' field.
      * @param value The value of 'contentKeys'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setContentKeys(java.util.List<com.opentext.bn.converters.avro.entity.ContentKey> value) {
      validate(fields()[3], value);
      this.contentKeys = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'contentKeys' field has been set.
      * @return True if the 'contentKeys' field has been set, false otherwise.
      */
    public boolean hasContentKeys() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'contentKeys' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearContentKeys() {
      contentKeys = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'controlNumber' field.
      * @return The value.
      */
    public java.lang.String getControlNumber() {
      return controlNumber;
    }

    /**
      * Sets the value of the 'controlNumber' field.
      * @param value The value of 'controlNumber'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setControlNumber(java.lang.String value) {
      validate(fields()[4], value);
      this.controlNumber = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'controlNumber' field has been set.
      * @return True if the 'controlNumber' field has been set, false otherwise.
      */
    public boolean hasControlNumber() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'controlNumber' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearControlNumber() {
      controlNumber = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'directDocumentCount' field.
      * @return The value.
      */
    public java.lang.Integer getDirectDocumentCount() {
      return directDocumentCount;
    }

    /**
      * Sets the value of the 'directDocumentCount' field.
      * @param value The value of 'directDocumentCount'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setDirectDocumentCount(int value) {
      validate(fields()[5], value);
      this.directDocumentCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'directDocumentCount' field has been set.
      * @return True if the 'directDocumentCount' field has been set, false otherwise.
      */
    public boolean hasDirectDocumentCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'directDocumentCount' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearDirectDocumentCount() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'directEnvelopeCount' field.
      * @return The value.
      */
    public java.lang.Integer getDirectEnvelopeCount() {
      return directEnvelopeCount;
    }

    /**
      * Sets the value of the 'directEnvelopeCount' field.
      * @param value The value of 'directEnvelopeCount'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setDirectEnvelopeCount(int value) {
      validate(fields()[6], value);
      this.directEnvelopeCount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'directEnvelopeCount' field has been set.
      * @return True if the 'directEnvelopeCount' field has been set, false otherwise.
      */
    public boolean hasDirectEnvelopeCount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'directEnvelopeCount' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearDirectEnvelopeCount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'documentType' field.
      * @return The value.
      */
    public java.lang.String getDocumentType() {
      return documentType;
    }

    /**
      * Sets the value of the 'documentType' field.
      * @param value The value of 'documentType'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setDocumentType(java.lang.String value) {
      validate(fields()[7], value);
      this.documentType = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'documentType' field has been set.
      * @return True if the 'documentType' field has been set, false otherwise.
      */
    public boolean hasDocumentType() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'documentType' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearDocumentType() {
      documentType = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'documentFunctionalClassification' field.
      * @return The value.
      */
    public java.lang.String getDocumentFunctionalClassification() {
      return documentFunctionalClassification;
    }

    /**
      * Sets the value of the 'documentFunctionalClassification' field.
      * @param value The value of 'documentFunctionalClassification'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setDocumentFunctionalClassification(java.lang.String value) {
      validate(fields()[8], value);
      this.documentFunctionalClassification = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'documentFunctionalClassification' field has been set.
      * @return True if the 'documentFunctionalClassification' field has been set, false otherwise.
      */
    public boolean hasDocumentFunctionalClassification() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'documentFunctionalClassification' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearDocumentFunctionalClassification() {
      documentFunctionalClassification = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'envelopeId' field.
      * @return The value.
      */
    public java.lang.String getEnvelopeId() {
      return envelopeId;
    }

    /**
      * Sets the value of the 'envelopeId' field.
      * @param value The value of 'envelopeId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setEnvelopeId(java.lang.String value) {
      validate(fields()[9], value);
      this.envelopeId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'envelopeId' field has been set.
      * @return True if the 'envelopeId' field has been set, false otherwise.
      */
    public boolean hasEnvelopeId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'envelopeId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearEnvelopeId() {
      envelopeId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'envelopeLevel' field.
      * @return The value.
      */
    public java.lang.String getEnvelopeLevel() {
      return envelopeLevel;
    }

    /**
      * Sets the value of the 'envelopeLevel' field.
      * @param value The value of 'envelopeLevel'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setEnvelopeLevel(java.lang.String value) {
      validate(fields()[10], value);
      this.envelopeLevel = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'envelopeLevel' field has been set.
      * @return True if the 'envelopeLevel' field has been set, false otherwise.
      */
    public boolean hasEnvelopeLevel() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'envelopeLevel' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearEnvelopeLevel() {
      envelopeLevel = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'envelopeType' field.
      * @return The value.
      */
    public java.lang.String getEnvelopeType() {
      return envelopeType;
    }

    /**
      * Sets the value of the 'envelopeType' field.
      * @param value The value of 'envelopeType'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setEnvelopeType(java.lang.String value) {
      validate(fields()[11], value);
      this.envelopeType = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'envelopeType' field has been set.
      * @return True if the 'envelopeType' field has been set, false otherwise.
      */
    public boolean hasEnvelopeType() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'envelopeType' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearEnvelopeType() {
      envelopeType = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'envelopeVersion' field.
      * @return The value.
      */
    public java.lang.String getEnvelopeVersion() {
      return envelopeVersion;
    }

    /**
      * Sets the value of the 'envelopeVersion' field.
      * @param value The value of 'envelopeVersion'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setEnvelopeVersion(java.lang.String value) {
      validate(fields()[12], value);
      this.envelopeVersion = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'envelopeVersion' field has been set.
      * @return True if the 'envelopeVersion' field has been set, false otherwise.
      */
    public boolean hasEnvelopeVersion() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'envelopeVersion' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearEnvelopeVersion() {
      envelopeVersion = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setEventId(java.lang.String value) {
      validate(fields()[13], value);
      this.eventId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getEventTimestamp() {
      return eventTimestamp;
    }

    /**
      * Sets the value of the 'eventTimestamp' field.
      * @param value The value of 'eventTimestamp'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setEventTimestamp(java.lang.Long value) {
      validate(fields()[14], value);
      this.eventTimestamp = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTimestamp' field has been set.
      * @return True if the 'eventTimestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'eventTimestamp' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearEventTimestamp() {
      eventTimestamp = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileInfo' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.PayloadRef getFileInfo() {
      return fileInfo;
    }

    /**
      * Sets the value of the 'fileInfo' field.
      * @param value The value of 'fileInfo'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setFileInfo(com.opentext.bn.converters.avro.entity.PayloadRef value) {
      validate(fields()[15], value);
      this.fileInfoBuilder = null;
      this.fileInfo = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'fileInfo' field has been set.
      * @return True if the 'fileInfo' field has been set, false otherwise.
      */
    public boolean hasFileInfo() {
      return fieldSetFlags()[15];
    }

    /**
     * Gets the Builder instance for the 'fileInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.PayloadRef.Builder getFileInfoBuilder() {
      if (fileInfoBuilder == null) {
        if (hasFileInfo()) {
          setFileInfoBuilder(com.opentext.bn.converters.avro.entity.PayloadRef.newBuilder(fileInfo));
        } else {
          setFileInfoBuilder(com.opentext.bn.converters.avro.entity.PayloadRef.newBuilder());
        }
      }
      return fileInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'fileInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setFileInfoBuilder(com.opentext.bn.converters.avro.entity.PayloadRef.Builder value) {
      clearFileInfo();
      fileInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fileInfo' field has an active Builder instance
     * @return True if the 'fileInfo' field has an active Builder instance
     */
    public boolean hasFileInfoBuilder() {
      return fileInfoBuilder != null;
    }

    /**
      * Clears the value of the 'fileInfo' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearFileInfo() {
      fileInfo = null;
      fileInfoBuilder = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'introspectionSource' field.
      * @return The value.
      */
    public java.lang.String getIntrospectionSource() {
      return introspectionSource;
    }

    /**
      * Sets the value of the 'introspectionSource' field.
      * @param value The value of 'introspectionSource'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setIntrospectionSource(java.lang.String value) {
      validate(fields()[16], value);
      this.introspectionSource = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'introspectionSource' field has been set.
      * @return True if the 'introspectionSource' field has been set, false otherwise.
      */
    public boolean hasIntrospectionSource() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'introspectionSource' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearIntrospectionSource() {
      introspectionSource = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'introspectionType' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.IntrospectionType getIntrospectionType() {
      return introspectionType;
    }

    /**
      * Sets the value of the 'introspectionType' field.
      * @param value The value of 'introspectionType'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setIntrospectionType(com.opentext.bn.converters.avro.entity.IntrospectionType value) {
      validate(fields()[17], value);
      this.introspectionType = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'introspectionType' field has been set.
      * @return True if the 'introspectionType' field has been set, false otherwise.
      */
    public boolean hasIntrospectionType() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'introspectionType' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearIntrospectionType() {
      introspectionType = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'processId' field.
      * @return The value.
      */
    public java.lang.String getProcessId() {
      return processId;
    }

    /**
      * Sets the value of the 'processId' field.
      * @param value The value of 'processId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setProcessId(java.lang.String value) {
      validate(fields()[18], value);
      this.processId = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'processId' field has been set.
      * @return True if the 'processId' field has been set, false otherwise.
      */
    public boolean hasProcessId() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'processId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearProcessId() {
      processId = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'productionTestFlag' field.
      * @return The value.
      */
    public java.lang.String getProductionTestFlag() {
      return productionTestFlag;
    }

    /**
      * Sets the value of the 'productionTestFlag' field.
      * @param value The value of 'productionTestFlag'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setProductionTestFlag(java.lang.String value) {
      validate(fields()[19], value);
      this.productionTestFlag = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'productionTestFlag' field has been set.
      * @return True if the 'productionTestFlag' field has been set, false otherwise.
      */
    public boolean hasProductionTestFlag() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'productionTestFlag' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearProductionTestFlag() {
      productionTestFlag = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiverAddress' field.
      * @return The value.
      */
    public java.lang.String getReceiverAddress() {
      return receiverAddress;
    }

    /**
      * Sets the value of the 'receiverAddress' field.
      * @param value The value of 'receiverAddress'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setReceiverAddress(java.lang.String value) {
      validate(fields()[20], value);
      this.receiverAddress = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'receiverAddress' field has been set.
      * @return True if the 'receiverAddress' field has been set, false otherwise.
      */
    public boolean hasReceiverAddress() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'receiverAddress' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearReceiverAddress() {
      receiverAddress = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'segmentTerminator' field.
      * @return The value.
      */
    public java.lang.String getSegmentTerminator() {
      return segmentTerminator;
    }

    /**
      * Sets the value of the 'segmentTerminator' field.
      * @param value The value of 'segmentTerminator'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setSegmentTerminator(java.lang.String value) {
      validate(fields()[21], value);
      this.segmentTerminator = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'segmentTerminator' field has been set.
      * @return True if the 'segmentTerminator' field has been set, false otherwise.
      */
    public boolean hasSegmentTerminator() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'segmentTerminator' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearSegmentTerminator() {
      segmentTerminator = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'senderAddress' field.
      * @return The value.
      */
    public java.lang.String getSenderAddress() {
      return senderAddress;
    }

    /**
      * Sets the value of the 'senderAddress' field.
      * @param value The value of 'senderAddress'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setSenderAddress(java.lang.String value) {
      validate(fields()[22], value);
      this.senderAddress = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'senderAddress' field has been set.
      * @return True if the 'senderAddress' field has been set, false otherwise.
      */
    public boolean hasSenderAddress() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'senderAddress' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearSenderAddress() {
      senderAddress = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'sentDate' field.
      * @return The value.
      */
    public java.lang.String getSentDate() {
      return sentDate;
    }

    /**
      * Sets the value of the 'sentDate' field.
      * @param value The value of 'sentDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setSentDate(java.lang.String value) {
      validate(fields()[23], value);
      this.sentDate = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'sentDate' field has been set.
      * @return True if the 'sentDate' field has been set, false otherwise.
      */
    public boolean hasSentDate() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'sentDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearSentDate() {
      sentDate = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'sentTime' field.
      * @return The value.
      */
    public java.lang.String getSentTime() {
      return sentTime;
    }

    /**
      * Sets the value of the 'sentTime' field.
      * @param value The value of 'sentTime'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setSentTime(java.lang.String value) {
      validate(fields()[24], value);
      this.sentTime = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'sentTime' field has been set.
      * @return True if the 'sentTime' field has been set, false otherwise.
      */
    public boolean hasSentTime() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'sentTime' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearSentTime() {
      sentTime = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskId' field.
      * @return The value.
      */
    public java.lang.String getTaskId() {
      return taskId;
    }

    /**
      * Sets the value of the 'taskId' field.
      * @param value The value of 'taskId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setTaskId(java.lang.String value) {
      validate(fields()[25], value);
      this.taskId = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'taskId' field has been set.
      * @return True if the 'taskId' field has been set, false otherwise.
      */
    public boolean hasTaskId() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'taskId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearTaskId() {
      taskId = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.lang.String getTransactionId() {
      return transactionId;
    }

    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder setTransactionId(java.lang.String value) {
      validate(fields()[26], value);
      this.transactionId = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.EnvelopeEvent.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EnvelopeEvent build() {
      try {
        EnvelopeEvent record = new EnvelopeEvent();
        record.containingParentId = fieldSetFlags()[0] ? this.containingParentId : (java.lang.String) defaultValue(fields()[0]);
        record.containingParentLevel = fieldSetFlags()[1] ? this.containingParentLevel : (java.lang.String) defaultValue(fields()[1]);
        record.containingParentType = fieldSetFlags()[2] ? this.containingParentType : (java.lang.String) defaultValue(fields()[2]);
        record.contentKeys = fieldSetFlags()[3] ? this.contentKeys : (java.util.List<com.opentext.bn.converters.avro.entity.ContentKey>) defaultValue(fields()[3]);
        record.controlNumber = fieldSetFlags()[4] ? this.controlNumber : (java.lang.String) defaultValue(fields()[4]);
        record.directDocumentCount = fieldSetFlags()[5] ? this.directDocumentCount : (java.lang.Integer) defaultValue(fields()[5]);
        record.directEnvelopeCount = fieldSetFlags()[6] ? this.directEnvelopeCount : (java.lang.Integer) defaultValue(fields()[6]);
        record.documentType = fieldSetFlags()[7] ? this.documentType : (java.lang.String) defaultValue(fields()[7]);
        record.documentFunctionalClassification = fieldSetFlags()[8] ? this.documentFunctionalClassification : (java.lang.String) defaultValue(fields()[8]);
        record.envelopeId = fieldSetFlags()[9] ? this.envelopeId : (java.lang.String) defaultValue(fields()[9]);
        record.envelopeLevel = fieldSetFlags()[10] ? this.envelopeLevel : (java.lang.String) defaultValue(fields()[10]);
        record.envelopeType = fieldSetFlags()[11] ? this.envelopeType : (java.lang.String) defaultValue(fields()[11]);
        record.envelopeVersion = fieldSetFlags()[12] ? this.envelopeVersion : (java.lang.String) defaultValue(fields()[12]);
        record.eventId = fieldSetFlags()[13] ? this.eventId : (java.lang.String) defaultValue(fields()[13]);
        record.eventTimestamp = fieldSetFlags()[14] ? this.eventTimestamp : (java.lang.Long) defaultValue(fields()[14]);
        if (fileInfoBuilder != null) {
          record.fileInfo = this.fileInfoBuilder.build();
        } else {
          record.fileInfo = fieldSetFlags()[15] ? this.fileInfo : (com.opentext.bn.converters.avro.entity.PayloadRef) defaultValue(fields()[15]);
        }
        record.introspectionSource = fieldSetFlags()[16] ? this.introspectionSource : (java.lang.String) defaultValue(fields()[16]);
        record.introspectionType = fieldSetFlags()[17] ? this.introspectionType : (com.opentext.bn.converters.avro.entity.IntrospectionType) defaultValue(fields()[17]);
        record.processId = fieldSetFlags()[18] ? this.processId : (java.lang.String) defaultValue(fields()[18]);
        record.productionTestFlag = fieldSetFlags()[19] ? this.productionTestFlag : (java.lang.String) defaultValue(fields()[19]);
        record.receiverAddress = fieldSetFlags()[20] ? this.receiverAddress : (java.lang.String) defaultValue(fields()[20]);
        record.segmentTerminator = fieldSetFlags()[21] ? this.segmentTerminator : (java.lang.String) defaultValue(fields()[21]);
        record.senderAddress = fieldSetFlags()[22] ? this.senderAddress : (java.lang.String) defaultValue(fields()[22]);
        record.sentDate = fieldSetFlags()[23] ? this.sentDate : (java.lang.String) defaultValue(fields()[23]);
        record.sentTime = fieldSetFlags()[24] ? this.sentTime : (java.lang.String) defaultValue(fields()[24]);
        record.taskId = fieldSetFlags()[25] ? this.taskId : (java.lang.String) defaultValue(fields()[25]);
        record.transactionId = fieldSetFlags()[26] ? this.transactionId : (java.lang.String) defaultValue(fields()[26]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EnvelopeEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<EnvelopeEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EnvelopeEvent>
    READER$ = (org.apache.avro.io.DatumReader<EnvelopeEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
